// components/BachelorRegistration.jsx
import { useState } from 'react';
import { useTranslation } from 'react-i18next';

const BachelorRegistration = () => {
  const { t } = useTranslation();
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState({
    personal: {
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      birthDate: ''
    },
    education: {
      program: '',
      motivation: '',
      previousEducation: '',
      graduationYear: ''
    },
    documents: {
      passport: null,
      diploma: null,
      photos: null,
      medicalCertificate: null
    }
  });

  const [formErrors, setFormErrors] = useState({});

  const steps = [
    { 
      number: 1, 
      title: t('bachelor.registration.steps.personal.title', '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'), 
      icon: 'üë§',
      description: t('bachelor.registration.steps.personal.description', '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–µ')
    },
    { 
      number: 2, 
      title: t('bachelor.registration.steps.education.title', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'), 
      icon: 'üéì',
      description: t('bachelor.registration.steps.education.description', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
    },
    { 
      number: 3, 
      title: t('bachelor.registration.steps.documents.title', '–î–æ–∫—É–º–µ–Ω—Ç—ã'), 
      icon: 'üìÑ',
      description: t('bachelor.registration.steps.documents.description', '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
    },
    { 
      number: 4, 
      title: t('bachelor.registration.steps.review.title', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'), 
      icon: '‚úÖ',
      description: t('bachelor.registration.steps.review.description', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏')
    }
  ];

  const programs = [
    { id: 'cs', name: t('bachelor.registration.programs.cs', '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏') },
    { id: 'se', name: t('bachelor.registration.programs.se', '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è') },
    { id: 'cyber', name: t('bachelor.registration.programs.cyber', '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å') },
    { id: 'ai', name: t('bachelor.registration.programs.ai', '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç') },
    { id: 'data', name: t('bachelor.registration.programs.data', '–ù–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö') }
  ];

  const deadlines = [
    { 
      period: t('bachelor.registration.deadlines.main.period', '–û—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä'), 
      date: '20 –∏—é–Ω—è - 25 –∏—é–ª—è',
      status: 'active'
    },
    { 
      period: t('bachelor.registration.deadlines.additional.period', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä'), 
      date: '1-15 –∞–≤–≥—É—Å—Ç–∞',
      status: 'upcoming'
    }
  ];

  const requirements = [
    t('bachelor.registration.requirements.age', '–í–æ–∑—Ä–∞—Å—Ç –æ—Ç 17 –¥–æ 25 –ª–µ—Ç'),
    t('bachelor.registration.requirements.education', '–ê—Ç—Ç–µ—Å—Ç–∞—Ç –æ —Å—Ä–µ–¥–Ω–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏'),
    t('bachelor.registration.requirements.exams', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤'),
    t('bachelor.registration.requirements.language', '–í–ª–∞–¥–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º (–¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º)'),
    t('bachelor.registration.requirements.health', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞')
  ];

  const validateStep = (step) => {
    const errors = {};
    
    if (step === 0) {
      if (!formData.personal.firstName) errors.firstName = t('bachelor.registration.errors.required');
      if (!formData.personal.lastName) errors.lastName = t('bachelor.registration.errors.required');
      if (!formData.personal.email) errors.email = t('bachelor.registration.errors.required');
      if (!formData.personal.phone) errors.phone = t('bachelor.registration.errors.required');
    }
    
    if (step === 1) {
      if (!formData.education.program) errors.program = t('bachelor.registration.errors.required');
      if (!formData.education.motivation) errors.motivation = t('bachelor.registration.errors.required');
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, steps.length - 1));
    }
  };

  const prevStep = () => setCurrentStep(prev => Math.max(prev - 1, 0));

  const handleInputChange = (step, field, value) => {
    setFormData(prev => ({
      ...prev,
      [step]: {
        ...prev[step],
        [field]: value
      }
    }));
  };

  const handleFileUpload = (field, file) => {
    setFormData(prev => ({
      ...prev,
      documents: {
        ...prev.documents,
        [field]: file
      }
    }));
  };

  const handleSubmit = () => {
    // Here would be API call to submit the application
    console.log('Form submitted:', formData);
    alert(t('bachelor.registration.success', '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!'));
  };

  const getProgressPercentage = () => {
    return ((currentStep + 1) / steps.length) * 100;
  };

  return (
    <div className="min-h-screen bg-white py-12 px-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            {t('bachelor.registration.title', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç')}
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            {t('bachelor.registration.subtitle', '–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∞–∫–∞–¥–µ–º–∏—é')}
          </p>
        </div>

        <div className="grid lg:grid-cols-4 gap-8">
          {/* Progress Steps - Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-2xl border border-gray-200 p-6 sticky top-6">
              <div className="mb-8">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium text-gray-600">
                    {t('bachelor.registration.progress', '–ü—Ä–æ–≥—Ä–µ—Å—Å')}
                  </span>
                  <span className="text-sm font-bold text-blue-600">
                    {Math.round(getProgressPercentage())}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-600 h-2 rounded-full transition-all duration-500"
                    style={{ width: `${getProgressPercentage()}%` }}
                  ></div>
                </div>
              </div>

              <div className="space-y-4">
                {steps.map((step, index) => (
                  <div
                    key={step.number}
                    className={`flex items-center gap-4 p-3 rounded-xl transition-all duration-300 ${
                      index === currentStep
                        ? 'bg-blue-50 border border-blue-200'
                        : index < currentStep
                        ? 'bg-green-50 border border-green-200'
                        : 'bg-gray-50 border border-gray-200'
                    }`}
                  >
                    <div className={`w-10 h-10 rounded-xl flex items-center justify-center font-semibold transition-all duration-300 ${
                      index === currentStep
                        ? 'bg-blue-600 text-white'
                        : index < currentStep
                        ? 'bg-green-600 text-white'
                        : 'bg-gray-300 text-gray-600'
                    }`}>
                      {index < currentStep ? '‚úì' : step.icon}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className={`text-sm font-medium ${
                        index === currentStep ? 'text-blue-800' : 
                        index < currentStep ? 'text-green-800' : 'text-gray-600'
                      }`}>
                        {step.title}
                      </div>
                      <div className="text-xs text-gray-500 truncate">
                        {step.description}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl border border-gray-200 overflow-hidden">
              {/* Step Header */}
              <div className="border-b border-gray-200 p-6 bg-gray-50">
                <div className="flex items-center gap-4">
                  <div className="w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center text-white font-bold text-lg">
                    {steps[currentStep].number}
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-gray-900">
                      {steps[currentStep].title}
                    </h2>
                    <p className="text-gray-600 mt-1">
                      {steps[currentStep].description}
                    </p>
                  </div>
                </div>
              </div>

              {/* Step Content */}
              <div className="p-6">
                {currentStep === 0 && (
                  <div className="space-y-6">
                    <div className="grid md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          {t('bachelor.registration.form.firstName', '–ò–º—è')} *
                        </label>
                        <input 
                          type="text" 
                          value={formData.personal.firstName}
                          onChange={(e) => handleInputChange('personal', 'firstName', e.target.value)}
                          className={`w-full p-4 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                            formErrors.firstName ? 'border-red-300' : 'border-gray-300'
                          }`}
                          placeholder={t('bachelor.registration.form.firstNamePlaceholder', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')}
                        />
                        {formErrors.firstName && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.firstName}</p>
                        )}
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          {t('bachelor.registration.form.lastName', '–§–∞–º–∏–ª–∏—è')} *
                        </label>
                        <input 
                          type="text" 
                          value={formData.personal.lastName}
                          onChange={(e) => handleInputChange('personal', 'lastName', e.target.value)}
                          className={`w-full p-4 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                            formErrors.lastName ? 'border-red-300' : 'border-gray-300'
                          }`}
                          placeholder={t('bachelor.registration.form.lastNamePlaceholder', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')}
                        />
                        {formErrors.lastName && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.lastName}</p>
                        )}
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          {t('bachelor.registration.form.email', 'Email')} *
                        </label>
                        <input 
                          type="email" 
                          value={formData.personal.email}
                          onChange={(e) => handleInputChange('personal', 'email', e.target.value)}
                          className={`w-full p-4 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                            formErrors.email ? 'border-red-300' : 'border-gray-300'
                          }`}
                          placeholder="email@example.com"
                        />
                        {formErrors.email && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.email}</p>
                        )}
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          {t('bachelor.registration.form.phone', '–¢–µ–ª–µ—Ñ–æ–Ω')} *
                        </label>
                        <input 
                          type="tel" 
                          value={formData.personal.phone}
                          onChange={(e) => handleInputChange('personal', 'phone', e.target.value)}
                          className={`w-full p-4 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                            formErrors.phone ? 'border-red-300' : 'border-gray-300'
                          }`}
                          placeholder="+7 (XXX) XXX-XX-XX"
                        />
                        {formErrors.phone && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.phone}</p>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                {currentStep === 1 && (
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        {t('bachelor.registration.form.selectProgram', '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É')} *
                      </label>
                      <select 
                        value={formData.education.program}
                        onChange={(e) => handleInputChange('education', 'program', e.target.value)}
                        className={`w-full p-4 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                          formErrors.program ? 'border-red-300' : 'border-gray-300'
                        }`}
                      >
                        <option value="">{t('bachelor.registration.form.chooseProgram', '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è')}</option>
                        {programs.map(program => (
                          <option key={program.id} value={program.id}>
                            {program.name}
                          </option>
                        ))}
                      </select>
                      {formErrors.program && (
                        <p className="text-red-500 text-sm mt-1">{formErrors.program}</p>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        {t('bachelor.registration.form.motivation', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ')} *
                      </label>
                      <textarea 
                        value={formData.education.motivation}
                        onChange={(e) => handleInputChange('education', 'motivation', e.target.value)}
                        rows={6}
                        className={`w-full p-4 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                          formErrors.motivation ? 'border-red-300' : 'border-gray-300'
                        }`}
                        placeholder={t('bachelor.registration.form.motivationPlaceholder', '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö –∏ –ø–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ–π –∞–∫–∞–¥–µ–º–∏–∏...')}
                      />
                      {formErrors.motivation && (
                        <p className="text-red-500 text-sm mt-1">{formErrors.motivation}</p>
                      )}
                    </div>
                  </div>
                )}

                {currentStep === 2 && (
                  <div className="space-y-6">
                    <p className="text-gray-600 mb-4">
                      {t('bachelor.registration.uploadDescription', '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ JPG')}
                    </p>
                    
                    {[
                      { key: 'passport', label: t('bachelor.registration.documents.passport', '–ö–æ–ø–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞') },
                      { key: 'diploma', label: t('bachelor.registration.documents.diploma', '–ê—Ç—Ç–µ—Å—Ç–∞—Ç –∏–ª–∏ –¥–∏–ø–ª–æ–º') },
                      { key: 'photos', label: t('bachelor.registration.documents.photos', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 3x4') },
                      { key: 'medicalCertificate', label: t('bachelor.registration.documents.medical', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞') }
                    ].map((doc, idx) => (
                      <div key={doc.key} className="flex items-center justify-between p-4 border border-gray-300 rounded-xl hover:border-blue-300 transition-colors">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-blue-50 rounded-lg flex items-center justify-center">
                            <span className="text-blue-600">üìÑ</span>
                          </div>
                          <div>
                            <span className="font-medium text-gray-900">{doc.label}</span>
                            <p className="text-sm text-gray-500">
                              {formData.documents[doc.key] ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
                            </p>
                          </div>
                        </div>
                        <button 
                          onClick={() => document.getElementById(`file-${doc.key}`).click()}
                          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                        >
                          {t('bachelor.registration.upload', '–ó–∞–≥—Ä—É–∑–∏—Ç—å')}
                        </button>
                        <input
                          id={`file-${doc.key}`}
                          type="file"
                          className="hidden"
                          accept=".pdf,.jpg,.jpeg,.png"
                          onChange={(e) => handleFileUpload(doc.key, e.target.files[0])}
                        />
                      </div>
                    ))}
                  </div>
                )}

                {currentStep === 3 && (
                  <div className="space-y-6">
                    <div className="text-center py-4">
                      <div className="text-6xl mb-4">üéì</div>
                      <h3 className="text-2xl font-bold text-gray-900 mb-4">
                        {t('bachelor.registration.reviewTitle', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É')}
                      </h3>
                      <p className="text-gray-600 mb-8">
                        {t('bachelor.registration.reviewDescription', '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π')}
                      </p>
                    </div>

                    <div className="bg-gray-50 rounded-xl p-6 space-y-4">
                      <h4 className="font-semibold text-gray-900 text-lg mb-4">–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
                      <div className="grid md:grid-cols-2 gap-4">
                        <div>
                          <span className="text-sm text-gray-600">–ò–º—è:</span>
                          <p className="font-medium">{formData.personal.firstName}</p>
                        </div>
                        <div>
                          <span className="text-sm text-gray-600">–§–∞–º–∏–ª–∏—è:</span>
                          <p className="font-medium">{formData.personal.lastName}</p>
                        </div>
                        <div>
                          <span className="text-sm text-gray-600">Email:</span>
                          <p className="font-medium">{formData.personal.email}</p>
                        </div>
                        <div>
                          <span className="text-sm text-gray-600">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                          <p className="font-medium">{formData.personal.phone}</p>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gray-50 rounded-xl p-6">
                      <h4 className="font-semibold text-gray-900 text-lg mb-4">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h4>
                      <div className="space-y-2">
                        <div>
                          <span className="text-sm text-gray-600">–ü—Ä–æ–≥—Ä–∞–º–º–∞:</span>
                          <p className="font-medium">
                            {programs.find(p => p.id === formData.education.program)?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Navigation Buttons */}
              <div className="border-t border-gray-200 p-6 bg-gray-50">
                <div className="flex justify-between">
                  <button
                    onClick={prevStep}
                    disabled={currentStep === 0}
                    className="px-8 py-3 border border-gray-300 rounded-xl disabled:opacity-50 disabled:cursor-not-allowed hover:border-blue-500 transition-colors font-medium"
                  >
                    {t('bachelor.registration.previous', '–ù–∞–∑–∞–¥')}
                  </button>
                  <button
                    onClick={currentStep === steps.length - 1 ? handleSubmit : nextStep}
                    className="px-8 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors font-medium shadow-sm"
                  >
                    {currentStep === steps.length - 1 
                      ? t('bachelor.registration.submit', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
                      : t('bachelor.registration.next', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
                    }
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Sidebar */}
          <div className="lg:col-span-1 space-y-6">
            {/* Deadlines */}
            <div className="bg-orange-50 border border-orange-200 rounded-2xl p-6">
              <h3 className="font-semibold text-orange-800 mb-4 flex items-center gap-2">
                <span>‚è∞</span>
                <span>{t('bachelor.registration.deadlinesTitle', '–°—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏')}</span>
              </h3>
              <div className="space-y-4">
                {deadlines.map((deadline, idx) => (
                  <div key={idx} className={`p-3 rounded-lg border ${
                    deadline.status === 'active' 
                      ? 'bg-white border-orange-300' 
                      : 'bg-orange-100 border-orange-200'
                  }`}>
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-orange-700 font-medium">{deadline.period}</span>
                      {deadline.status === 'active' && (
                        <span className="bg-orange-500 text-white text-xs px-2 py-1 rounded-full">
                          –ê–∫—Ç–∏–≤–Ω–æ
                        </span>
                      )}
                    </div>
                    <div className="text-orange-800 font-bold">{deadline.date}</div>
                  </div>
                ))}
              </div>
            </div>

            {/* Requirements */}
            <div className="bg-blue-50 border border-blue-200 rounded-2xl p-6">
              <h3 className="font-semibold text-blue-800 mb-4">
                {t('bachelor.registration.requirementsTitle', '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è')}
              </h3>
              <ul className="space-y-3">
                {requirements.map((requirement, idx) => (
                  <li key={idx} className="flex items-start gap-3">
                    <div className="w-5 h-5 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                    </div>
                    <span className="text-blue-700 text-sm">{requirement}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Help Section */}
            <div className="bg-green-50 border border-green-200 rounded-2xl p-6">
              <h3 className="font-semibold text-green-800 mb-3 flex items-center gap-2">
                <span>‚ùì</span>
                <span>{t('bachelor.registration.help.title', '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?')}</span>
              </h3>
              <p className="text-green-700 text-sm mb-4">
                {t('bachelor.registration.help.description', '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏')}
              </p>
              <button className="w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition-colors text-sm font-medium">
                {t('bachelor.registration.help.button', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π')}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BachelorRegistration;