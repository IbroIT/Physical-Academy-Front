import { useState } from 'react';
import { useTranslation } from 'react-i18next';

const ExchangePrograms = () => {
  const { t } = useTranslation();
  const [selectedRegion, setSelectedRegion] = useState('all');
  const [selectedDuration, setSelectedDuration] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  
  const data = t('students.exchange', { returnObjects: true });

  const regions = ['all', ...new Set(data.programs?.map(program => program.region))];
  const durations = ['all', ...new Set(data.programs?.map(program => program.durationType))];

  const filteredPrograms = data.programs?.filter(program => {
    const matchesRegion = selectedRegion === 'all' || program.region === selectedRegion;
    const matchesDuration = selectedDuration === 'all' || program.durationType === selectedDuration;
    const matchesSearch = program.university.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         program.country.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         program.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesRegion && matchesDuration && matchesSearch;
  }) || [];

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center mb-8">
        <h2 className="text-4xl font-bold text-gray-900 mb-4">
          {data?.title || '–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±–º–µ–Ω–∞'}
        </h2>
        <p className="text-gray-600 max-w-2xl mx-auto text-lg">
          {data?.subtitle || '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±–º–µ–Ω–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'}
        </p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {(data?.stats || [
          { value: '50+', label: '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤' },
          { value: '30+', label: '–°—Ç—Ä–∞–Ω' },
          { value: '500+', label: '–°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥–æ–¥' },
          { value: '95%', label: '–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞—è–≤–æ–∫' }
        ]).map((stat, index) => (
          <div 
            key={index}
            className="bg-white rounded-2xl p-4 text-center border border-gray-300 hover:border-blue-300 transition-colors"
          >
            <div className="text-2xl font-bold text-blue-600 mb-1">{stat.value}</div>
            <div className="text-gray-700 text-sm font-medium">{stat.label}</div>
          </div>
        ))}
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <div className="bg-white rounded-2xl p-6 border border-gray-300">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {/* –ü–æ–∏—Å–∫ */}
          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º</label>
            <div className="relative">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—É, —Å—Ç—Ä–∞–Ω–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-3 pl-10 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              />
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <span className="text-gray-400">üîç</span>
              </div>
              {searchTerm && (
                <button
                  onClick={() => setSearchTerm('')}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                >
                  <span className="text-gray-400 hover:text-gray-600">‚úï</span>
                </button>
              )}
            </div>
          </div>

          {/* –†–µ–≥–∏–æ–Ω */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">üåç –†–µ–≥–∏–æ–Ω</label>
            <select
              value={selectedRegion}
              onChange={(e) => setSelectedRegion(e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
            >
              <option value="all">–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã</option>
              {regions.filter(region => region !== 'all').map(region => (
                <option key={region} value={region}>
                  {data?.regions?.[region] || region}
                </option>
              ))}
            </select>
          </div>

          {/* –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</label>
            <select
              value={selectedDuration}
              onChange={(e) => setSelectedDuration(e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
            >
              <option value="all">–õ—é–±–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</option>
              {durations.filter(duration => duration !== 'all').map(duration => (
                <option key={duration} value={duration}>
                  {data?.durations?.[duration] || duration}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex flex-wrap gap-3 mt-4">
          <button 
            onClick={() => {
              setSelectedRegion('all');
              setSelectedDuration('all');
              setSearchTerm('');
            }}
            className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors font-medium text-sm"
          >
            –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
          </button>
          <div className="text-sm text-gray-500 bg-gray-50 px-3 py-2 rounded-lg">
            –ù–∞–π–¥–µ–Ω–æ: {filteredPrograms.length} –ø—Ä–æ–≥—Ä–∞–º–º
          </div>
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±–º–µ–Ω–∞ */}
      <div className="space-y-6">
        {filteredPrograms.map((program, index) => (
          <ProgramCard key={program.id || index} program={program} index={index} />
        ))}
      </div>

      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" */}
      {filteredPrograms.length === 0 && (
        <div className="text-center py-12 bg-white rounded-2xl border border-gray-300">
          <div className="text-6xl mb-4">üîç</div>
          <h3 className="text-xl font-semibold text-gray-900 mb-2">–ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p className="text-gray-600 mb-6">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
          <button 
            onClick={() => {
              setSelectedRegion('all');
              setSelectedDuration('all');
              setSearchTerm('');
            }}
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium"
          >
            –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
          </button>
        </div>
      )}

      {/* –î–µ–¥–ª–∞–π–Ω—ã */}
      <div className="bg-blue-50 rounded-2xl p-6 border border-blue-200">
        <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center">üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {(data?.deadlines || [
            { date: '15 –º–∞—Ä—Ç–∞ 2024', program: 'Erasmus+ –ï–≤—Ä–æ–ø–∞', daysLeft: '–û—Å—Ç–∞–ª–æ—Å—å 45 –¥–Ω–µ–π' },
            { date: '1 –∞–ø—Ä–µ–ª—è 2024', program: '–ê–∑–∏—è-–ü–∞—Å–∏—Ñ–∏–∫', daysLeft: '–û—Å—Ç–∞–ª–æ—Å—å 60 –¥–Ω–µ–π' },
            { date: '15 –º–∞—è 2024', program: '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', daysLeft: '–û—Å—Ç–∞–ª–æ—Å—å 90 –¥–Ω–µ–π' }
          ]).map((deadline, index) => (
            <div key={index} className="bg-white rounded-xl p-4 text-center border border-blue-200 hover:border-blue-300 transition-colors">
              <div className="text-lg font-bold text-gray-900 mb-1">{deadline.date}</div>
              <div className="text-blue-600 text-sm font-medium mb-2">{deadline.program}</div>
              <div className="text-green-600 text-xs font-medium">{deadline.daysLeft}</div>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-green-50 rounded-2xl p-8 text-center border border-green-200">
        <h3 className="text-2xl font-bold text-gray-900 mb-4">–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã?</h3>
        <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
          –ù–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±–º–µ–Ω–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        </p>
        <button className="bg-green-600 text-white px-8 py-3 rounded-xl hover:bg-green-700 transition-colors font-medium">
          –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        </button>
      </div>
    </div>
  );
};

const ProgramCard = ({ program, index }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isApplying, setIsApplying] = useState(false);

  const handleApply = async () => {
    setIsApplying(true);
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    setIsApplying(false);
    alert(`–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É "${program.university}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`);
  };

  const getDifficultyColor = (difficulty) => {
    switch (difficulty) {
      case 'high': return { bg: 'bg-red-100', text: 'text-red-700' };
      case 'medium': return { bg: 'bg-yellow-100', text: 'text-yellow-700' };
      case 'low': return { bg: 'bg-green-100', text: 'text-green-700' };
      default: return { bg: 'bg-gray-100', text: 'text-gray-700' };
    }
  };

  const difficultyColors = getDifficultyColor(program.difficulty);

  return (
    <div className="bg-white rounded-2xl border border-gray-300 overflow-hidden hover:border-blue-300 transition-all duration-300">
      <div className="p-6">
        <div className="flex flex-col lg:flex-row lg:items-start justify-between gap-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="flex-1">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <h3 className="text-2xl font-bold text-gray-900 mb-2">
                  {program.university}
                </h3>
                <div className="flex flex-wrap items-center gap-3 text-gray-600 mb-3">
                  <span className="flex items-center gap-1">
                    <span>üåç</span>
                    <span>{program.country}</span>
                  </span>
                  <span className="flex items-center gap-1">
                    <span>‚è±Ô∏è</span>
                    <span>{program.duration}</span>
                  </span>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${difficultyColors.bg} ${difficultyColors.text}`}>
                    {program.difficultyLabel || program.difficulty}
                  </span>
                </div>
              </div>
              <div className="text-right">
                <div className="text-2xl font-bold text-blue-600 mb-1">{program.cost || '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</div>
                <div className="text-gray-500 text-sm">–°—Ç–æ–∏–º–æ—Å—Ç—å</div>
              </div>
            </div>

            <p className="text-gray-600 mb-4 leading-relaxed">{program.description}</p>

            {/* –ë—ã—Å—Ç—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div className="text-center bg-gray-50 rounded-lg p-3">
                <div className="text-lg font-bold text-gray-900">{program.language || '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}</div>
                <div className="text-gray-500 text-sm">–Ø–∑—ã–∫</div>
              </div>
              <div className="text-center bg-gray-50 rounded-lg p-3">
                <div className="text-lg font-bold text-gray-900">{program.grantsAvailable || '–î–æ—Å—Ç—É–ø–Ω—ã'}</div>
                <div className="text-gray-500 text-sm">–ì—Ä–∞–Ω—Ç—ã</div>
              </div>
              <div className="text-center bg-gray-50 rounded-lg p-3">
                <div className="text-lg font-bold text-gray-900">{program.deadline || '–°–∫–æ—Ä–æ'}</div>
                <div className="text-gray-500 text-sm">–î–µ–¥–ª–∞–π–Ω</div>
              </div>
              <div className="text-center bg-gray-50 rounded-lg p-3">
                <div className="text-lg font-bold text-gray-900">{program.availableSpots || '10'}</div>
                <div className="text-gray-500 text-sm">–ú–µ—Å—Ç–∞</div>
              </div>
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="lg:w-48 flex flex-col gap-3">
            <button
              onClick={handleApply}
              disabled={isApplying || program.availableSpots === 0}
              className={`w-full py-3 px-4 rounded-lg font-medium transition-colors flex items-center justify-center ${
                program.availableSpots > 0 && !isApplying
                  ? 'bg-blue-600 text-white hover:bg-blue-700'
                  : 'bg-gray-100 text-gray-400 cursor-not-allowed'
              }`}
            >
              {isApplying ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                <>
                  <span className="mr-2">üìù</span>
                  –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                </>
              )}
            </button>

            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="w-full py-3 px-4 bg-white border border-gray-300 text-gray-700 rounded-lg hover:border-blue-300 transition-colors font-medium flex items-center justify-center"
            >
              <span className="mr-2">{isExpanded ? 'üìã' : 'üîç'}</span>
              {isExpanded ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'}
            </button>

            {program.website && (
              <a
                href={program.website}
                target="_blank"
                rel="noopener noreferrer"
                className="w-full py-3 px-4 bg-white border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition-colors font-medium flex items-center justify-center"
              >
                <span className="mr-2">üåê</span>
                –°–∞–π—Ç –≤—É–∑–∞
              </a>
            )}
          </div>
        </div>

        {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {isExpanded && (
          <div className="mt-6 pt-6 border-t border-gray-200 space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è */}
              <div className="bg-blue-50 rounded-xl p-4 border border-blue-200">
                <h4 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                  <span>üìã</span>
                  <span>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</span>
                </h4>
                <ul className="space-y-2">
                  {(program.requirements || [
                    '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –æ—Ç 4.0',
                    '–£—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ B2',
                    '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π'
                  ]).map((req, reqIndex) => (
                    <li key={reqIndex} className="flex items-start text-gray-700">
                      <span className="text-blue-500 mr-2 mt-1">‚Ä¢</span>
                      {req}
                    </li>
                  ))}
                </ul>
              </div>

              {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
              <div className="bg-green-50 rounded-xl p-4 border border-green-200">
                <h4 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                  <span>‚≠ê</span>
                  <span>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</span>
                </h4>
                <ul className="space-y-2">
                  {(program.benefits || [
                    '–°—Ç–∏–ø–µ–Ω–¥–∏—è –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ',
                    '–Ø–∑—ã–∫–æ–≤—ã–µ –∫—É—Ä—Å—ã',
                    '–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'
                  ]).map((benefit, benefitIndex) => (
                    <li key={benefitIndex} className="flex items-start text-gray-700">
                      <span className="text-green-500 mr-2 mt-1">‚úì</span>
                      {benefit}
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã */}
            {program.availableCourses && (
              <div>
                <h4 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                  <span>üìö</span>
                  <span>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã</span>
                </h4>
                <div className="flex flex-wrap gap-2">
                  {program.availableCourses.map((course, courseIndex) => (
                    <span key={courseIndex} className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm font-medium">
                      {course}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ExchangePrograms;